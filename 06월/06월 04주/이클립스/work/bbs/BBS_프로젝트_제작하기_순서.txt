
CREATE DATABASE BBS;

[1] 데이터베이스 이름 BBS
- user 테이블

create table user (
    userId      VARCHAR(16) NOT NULL,
    userPw      VARCHAR(16) NOT NULL,
    userName    VARCHAR(30) NOT NULL,
    userEmail   VARCHAR(250),
    PRIMARY KEY(userId)
);

INSERT INTO user (userId,userPw,userName,userEmail)
VALUES 
("moonjong", "moon1234", "문선종", "moonseonjong@naver.com"),
("leeshooshin", "lee1234", "이순신", "leeshooshin@naver.com"),
("gaja", "gaja1234", "방랑자", "gaja@naver.com"),
("love", "love999", "차분희", "love@naver.com"),
("jogook", "jo1234", "조찬희", "moonseonjong@naver.com"),
("sunhee", "sun1234", "이선희", "moonseonjong@naver.com"),
("hangjea", "hang1234", "황선호", "moonseonjong@naver.com")


- notice 또는 bbs 또는 board 테이블

[2] 프로젝트 생성
- 톰켓서버연동
- 서버등록(프로젝트 bbs)

[3] WEBAPP
- index.jsp 만들고 테스 실행하기 웹브라우저에 띄우기

[4] 자바빈즈(DTO) 만들기
+
- UserDTO  

    userId
    userPw 
    userName
    userEmail

[4-2] 
-BbsDTO 


    bbsId     int	 NOT NULL,
    userId      VARCHAR(16) NOT NULL,
    subject     VARCHAR(30) NOT NULL,
    content    VARCHAR(4096) NOT NULL,
    writeDate  DATETIME,
    deleteOK   int,
    PRIMARY KEY(bbsId)


- source => Getter & Setter 생성

[5] JDBC => JDBC드라이버 .jar  웹앱라이브러리 복사 붙여넣기
- 서버 다시 실행한다.

[6] JDBC드라이버 .jar 등록 설정
-프로젝트이름 선택 => 마우스 오른쪽 => 빌드패스(Build Path) => 컨피그필드패스(Config Build Path) 
=> 라이브러리(liblary) => 버튼(Add JAR) 클릭 => 경로(bbs > ..... SRC  ... WEBAPP .. WEBINF > liblary ) 그리고 파일 선택 복사붙여넣기한 JDBC드라이버 .jar 파일을 선택한다.

[7] UserDAO 만들기
- JDBC URL
- DBID
- DBPW
- froName
- connection =>  설정

[7-2] BbsDAO 만들기 
- JDBC URL
- DBID
- DBPW
- froName
- connection =>  설정

글쓰기 메서드 
 계산입력 / 화면입력 / 화면입력/ 화면입력 / DAO시스템날짜 / DAO 기본값 1   
글번호 	작성자 	 /제목        /내용        / 작성일(현재날짜시간) / 삭제여부기본값입력 1 (삭제된 것 0 변경) 
bbsId     /userId      /subject     /content    /writeDate  		/deleteOK   

내림차순으로 마지막 글번호 +1
4
3
2
1


[8] 로그인 구현 [컨트롤러]
    // 로그인 => 아이디, 비밀번호 입력받아서 처리
	// login()  
	// 1 로그인 성공
	// 0 비밀번호 불일치
	//-1 아이디 불일치
	//-2 데이터베이스 오류
	
    // 아이디 입력값 받아서 비교하고 
	// 아이디가 맞으면 그다음 비밀번호를 비교한다. 그리고 로그인 구현

1. 로그인
로그인,로그아웃

회원가입폼 
로그인, 로그아웃 세션관리 ... 

create table bbs (
    bbsId     int	 NOT NULL,
    userId      VARCHAR(16) NOT NULL,
    subject     VARCHAR(1000) NOT NULL,
    content    VARCHAR(4096) NOT NULL,
    writeDate  DATETIME,
    deleteOK   int,
    PRIMARY KEY(bbsId)
);





2. 게시판
- 글쓰기
- 글보기
- 글수정
- 글삭제
- 글목록

2-1 글쓰기 폼 디자인 - write.jsp = writeAction.jsp
로그인한 사용자 
글제목 
글내용 

글쓰기 메서드 
 계산입력 / 화면입력 / 화면입력/ 화면입력 / DAO시스템날짜 / DAO 기본값 1   
글번호 	작성자 	 /제목        /내용        / 작성일(현재날짜시간) / 삭제여부기본값입력 1 (삭제된 것 0 변경) 
bbsId     /userId      /subject     /content    /writeDate  		/deleteOK   

내림차순으로 마지막 글번호 +1
4
3
2
1



// 아이디찾기
1. login.jsp 

   로그인폼 화면 
   링크
   아이디찾기 | 비밀번호찾기 
   
2. idSearchForm.jsp
이름, 이메일 전송 => 액션 파일에 전송 

3. idSearchAction.jsp
파라미터 값 이름, 이메일 => 유효성 검사 

UserDTO userDTO = new UserDAO().검색함수(파라미터 값 이름, 이메일);
반환값 아이디를 => idSearchResult.jsp 쿼리스트링으로 보낸다. 

4. UserDAO()
idSearch(String userName, String userEmail) 매개변수 받아서 쿼리 실행 
- 이름을 검색 => 이메일 => userDTO.append(rs.getString(2))
retrun userDTO  location.href ="./idSearchResult.jsp?userId=<%=userDTO.getUserId()%>";
 

5. idSearchResult.jsp
화면에 아이디를 userDTO.getUserId();  보여준다. 

userDTO.getUserId() => request.getParameter("userId")



// 비밀번호찾기 
1. 

2. pwSearchForm.jsp
아이디, 이메일 전송 => 액션 파일에 전송 

3. pwSearchAction.jsp
파라미터 값 아이디, 이메일 => 유효성 검사 

UserDTO userDTO = new UserDAO().검색함수(파라미터 값 아이디, 이메일);
반환값 아이디를 => pwSearchResult.jsp 쿼리스트링으로 보낸다. 

4. UserDAO()
idSearch(String userId, String userEmail) 매개변수 받아서 쿼리 실행 
- 아이디를 검색 => 이메일 => userDTO.append(rs.getString(2)) 비밀번호 반환 
retrun userDTO  location.href ="./pwSearchResult.jsp?userPw=<%=userDTO.getUserPw()%>";
 
5. pwSearchResult.jsp
화면에 아이디를 userDTO.getUserPw();  보여준다. 

userDTO.getUserPw() => request.getParameter("userPw")







